import { NextRequest, NextResponse } from "next/server";
import { buildApiUrl } from "@/app/lib/api/config";

interface LikePayload {
  statusId?: string;
  action?: "like" | "unlike";
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô parse JSON ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
function parseJsonSafely<T>(text: string): T | string | null {
  if (!text) return null;
  try {
    return JSON.parse(text) as T;
  } catch {
    return text;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡∏à‡∏£‡∏¥‡∏á
async function forwardLike({
  endpoint,
  method,
  authorization,
  apiKey,
  body,
}: {
  endpoint: string;
  method: "POST" | "DELETE";
  authorization: string;
  apiKey: string;
  body?: string; // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ body ‡πÄ‡∏õ‡πá‡∏ô optional ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DELETE ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÉ‡∏ô path
}) {
  const fetchOptions: RequestInit = {
    method,
    headers: {
      Accept: "application/json",
      Authorization: authorization,
      "x-api-key": apiKey,
    },
    cache: "no-store",
  };

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DELETE ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÉ‡∏ô path ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á body ‡πÅ‡∏•‡∏∞ Content-Type
  if (body) {
    fetchOptions.headers = {
      ...fetchOptions.headers,
      "Content-Type": "application/json",
    };
    fetchOptions.body = body;
  }

  return fetch(buildApiUrl(endpoint), fetchOptions);
}

export async function POST(request: NextRequest) {
  const apiKey = process.env.CIS_API_KEY;
  if (!apiKey) {
    console.error("Missing CIS_API_KEY");
    return NextResponse.json({ message: "Server missing API key" }, { status: 500 });
  }

  const authorization = request.headers.get("authorization");
  if (!authorization) {
    return NextResponse.json({ message: "Missing authorization header" }, { status: 401 });
  }

  let payload: LikePayload;
  try {
    payload = await request.json();
  } catch {
    return NextResponse.json({ message: "Invalid JSON body" }, { status: 400 });
  }

  const statusId = payload.statusId?.trim();
  if (!statusId) {
    return NextResponse.json({ message: "statusId is required" }, { status: 400 });
  }

  const action = payload.action === "unlike" ? "unlike" : "like";
  const method: "POST" | "DELETE" = action === "unlike" ? "DELETE" : "POST";
  const encodedId = encodeURIComponent(statusId);

  // üîÅ fallback endpoint ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
  const candidateEndpoints =
    action === "like"
      ? [
          `/status/like`,
          `/like`,
          `/status/${encodedId}/like`,
          `/status/like/${encodedId}`,
          `/status/${encodedId}/likes`,
        ]
      : [
          // ‡∏õ‡∏£‡∏±‡∏ö endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö unlike ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ DELETE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö remove like
          // ‡πÅ‡∏•‡∏∞ POST ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≤‡∏á API ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ action=unlike
          `/status/${encodedId}/like`, // DELETE to remove like
          `/status/${encodedId}/likes`, // DELETE to remove like
          `/status/unlike`,
          `/unlike`,
          `/status/${encodedId}/unlike`,
          `/status/unlike/${encodedId}`,
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å POST ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö unlike ‡∏ñ‡πâ‡∏≤ API ‡πÉ‡∏ä‡πâ POST ‡πÅ‡∏ó‡∏ô DELETE
          `/status/${encodedId}/toggle`, // ‡∏ö‡∏≤‡∏á API ‡πÉ‡∏ä‡πâ toggle ‡∏Å‡∏±‡∏ö action ‡πÉ‡∏ô body
        ];

  for (const endpoint of candidateEndpoints) {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô POST ‡∏´‡∏£‡∏∑‡∏≠ endpoint ‡πÑ‡∏°‡πà‡∏°‡∏µ ID ‡πÉ‡∏ô path ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á body
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DELETE ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÉ‡∏ô path ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á body ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
    const useBody = method === "POST" || !endpoint.includes(encodedId);
    let forwardedBody: string | undefined;
    if (useBody) {
      if (action === "unlike" && endpoint.includes("/toggle")) {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toggle endpoint ‡∏™‡πà‡∏á action ‡πÉ‡∏ô body
        forwardedBody = JSON.stringify({ statusId, action: "unlike" });
      } else {
        forwardedBody = JSON.stringify({ statusId });
      }
    }

    try {
      const upstream = await forwardLike({
        endpoint,
        method,
        authorization,
        apiKey,
        body: forwardedBody,
      });

      const raw = await upstream.text();
      const parsed = parseJsonSafely(raw);

      if (upstream.ok) {
        return NextResponse.json(
          typeof parsed === "string" ? { message: parsed } : parsed,
          { status: upstream.status }
        );
      }

      // ‡∏ñ‡πâ‡∏≤ endpoint ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 404,405,501 ‡πÉ‡∏´‡πâ return ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      if (![404, 405, 501].includes(upstream.status)) {
        return NextResponse.json(
          typeof parsed === "string" ? { message: parsed } : parsed,
          { status: upstream.status }
        );
      }
    } catch (error) {
      console.error("[classroom/like] network error", error);
      // ‡πÑ‡∏°‡πà return error ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÅ‡∏ï‡πà‡∏•‡∏≠‡∏á endpoint ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    }
  }

  return NextResponse.json(
    { message: `All ${action} endpoints failed` },
    { status: 502 }
  );
}